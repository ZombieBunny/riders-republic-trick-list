{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","tricks","JSON","parse","stringify","tricklist","default","handleChange","e","setState","selected","state","view","this","className","Pc","Playstation","Xbox","Autocomplete","disablePortal","autoHighlight","id","options","sx","width","onChange","event","newValue","getOptionLabel","option","move","renderInput","params","TextField","variant","label","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oyLAkFeA,E,kDA1Db,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAHAC,OAASC,KAAKC,MAAMD,KAAKE,UAAUC,IAAYC,QAE/B,EAIxBC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,SAAUF,KAH1B,EAAKG,MAAQ,CAAED,SAAU,MAFH,E,0CAQxB,WAAU,IACJE,EACuB,MAFpB,OAEDC,KAAKF,MAAMD,WACfE,EACE,qBAAKE,UAAU,mBAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,MAAf,UACE,sCACA,yCAAOD,KAAKF,MAAMD,gBAAlB,aAAO,EAAqBK,QAE9B,sBAAKD,UAAU,MAAf,UACE,+CACA,yCAAOD,KAAKF,MAAMD,gBAAlB,aAAO,EAAqBM,iBAE9B,sBAAKF,UAAU,MAAf,UACE,wCACA,yCAAOD,KAAKF,MAAMD,gBAAlB,aAAO,EAAqBO,gBAMtC,OACE,qBAAKH,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAACI,EAAA,EAAD,CACEC,eAAa,EACbC,eAAa,EACbC,GAAG,iBACHC,QAAST,KAAKZ,OACdsB,GAAI,CAAEC,MAAO,KACbC,SAAU,SAACC,EAAOC,GAChB,EAAKpB,aAAaoB,IAEpBC,eAAgB,SAACC,GAAD,OAAiBA,EAAOC,MACxCC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,yBACEC,QAAQ,UACJF,GAFN,IAGEG,MAAM,gCAIXvB,W,GAtDOwB,IAAMC,WCPTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c89bf89.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport * as tricklist from \"./trick-list.json\";\nimport { Divider, TextField } from \"@material-ui/core\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\n\n// interface AutocompleteOption {\n//   move: string;\n//   Pc: string;\n//   PlayStation: string;\n//   Xbox: string;\n// }\ninterface IState {\n  selected: null | {\n    move: string;\n    Pc: string;\n    Playstation: string;\n    Xbox: string;\n  };\n}\ninterface IProps {}\nclass App extends React.Component<IProps, IState> {\n  private tricks = JSON.parse(JSON.stringify(tricklist)).default;\n\n  constructor(props: any) {\n    super(props);\n    this.state = { selected: null };\n  }\n  handleChange = (e: any) => {\n    this.setState({ selected: e });\n  };\n\n  render() {\n    let view;\n    if (!!this.state.selected) {\n      view = (\n        <div className=\"result-container\">\n          <div className=\"column\">\n            <div className=\"row\">\n              <span>PC</span>\n              <span>{this.state.selected?.Pc}</span>\n            </div>\n            <div className=\"row\">\n              <span>Playstation</span>\n              <span>{this.state.selected?.Playstation}</span>\n            </div>\n            <div className=\"row\">\n              <span>Xbox</span>\n              <span>{this.state.selected?.Xbox}</span>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Autocomplete\n            disablePortal\n            autoHighlight\n            id=\"combo-box-demo\"\n            options={this.tricks}\n            sx={{ width: 300 }}\n            onChange={(event, newValue) => {\n              this.handleChange(newValue);\n            }}\n            getOptionLabel={(option: any) => option.move}\n            renderInput={(params) => (\n              <TextField\n                variant=\"filled\"\n                {...params}\n                label=\"Whats the trick called?\"\n              />\n            )}\n          />\n          {view}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}